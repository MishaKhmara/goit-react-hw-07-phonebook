{"version":3,"sources":["redux/auth/auth-reducer.js","redux/auth/auth-selectors.js","components/Navigation.css/Navigation.module.css","redux/auth/auth-actions.js","redux/auth/auth-operations.js","components/UserMenu/UserMenu.module.css","redux/contacts/contactsAction.js","components/Navigation.js","components/UserMenu/default-avatar.png","components/UserMenu/UserMenu.js","components/AuthNav.js","components/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","redux/contacts/contactsReducers.js","redux/store.js","index.js"],"names":["initialUserState","name","email","user","createReducer","registerSuccess","_","payload","loginSuccess","logoutSuccess","getCurrentUserSuccess","token","setError","error","registerError","loginError","logoutError","getCurrentUserError","isAuthenticated","combineReducers","getIsAuthenticated","state","auth","getUsername","module","exports","registerRequest","createAction","loginRequest","logoutRequest","getCurrentUserRequest","axios","defaults","baseURL","headers","common","Authorization","register","credentials","dispatch","a","post","response","data","message","logIn","logOut","getCurrentUser","getState","persistedToken","get","filteredNumber","fetchNumbersRequested","fetchNumbersSuccess","fetchNumbersFailure","addNumberRequested","addNumberSuccess","addNumberFailure","removeNumberRequested","removeNumberSuccess","removeNumberFailure","connect","to","exact","className","css","link","activeClassName","activeLink","mapDispatchToProps","onLogout","avatar","defaultAvatar","container","src","alt","width","Button","type","onClick","AuthNav","header","Component","component","redirectTo","routeProps","render","props","restricted","HomeView","lazy","RegisterView","LoginView","ContactsView","App","this","onGetCurretnUser","fallback","path","loading","numberReducer","index","findIndex","id","slice","handleError","clearError","filterReducer","action","contactsReducersr","contactList","filter","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contacts","contactsReducers","devTools","process","persistor","persistStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed933c56.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  registerSuccess,\r\n  registerError,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n} from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [registerSuccess]: (_, { payload }) => payload.user,\r\n  [loginSuccess]: (_, { payload }) => payload.user,\r\n  [logoutSuccess]: () => initialUserState,\r\n  [getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [registerSuccess]: (_, { payload }) => payload.token,\r\n  [loginSuccess]: (_, { payload }) => payload.token,\r\n  [logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [registerError]: setError,\r\n  [loginError]: setError,\r\n  [logoutError]: setError,\r\n  [getCurrentUserError]: setError,\r\n});\r\nconst isAuthenticated = createReducer(false, {\r\n  [registerSuccess]: () => true,\r\n  [loginSuccess]: () => true,\r\n  [getCurrentUserSuccess]: () => true,\r\n  [registerError]: () => false,\r\n  [loginError]: () => false,\r\n  [getCurrentUserError]: () => false,\r\n  [logoutSuccess]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});\r\n","const getIsAuthenticated = state => state.auth.isAuthenticated;\r\n\r\nconst getUsername = state => state.auth.user.name;\r\nexport { getIsAuthenticated, getUsername };\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Navigation_header__3yJjw\",\"link\":\"Navigation_link__1B44H\",\"activeLink\":\"Navigation_activeLink__1yV8S\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nexport {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n} from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\n/*\r\n * POST @ /users/signup\r\n * body { name, email, password }\r\n *\r\n * После успешной регистрации добавляем токен в HTTP-заголовок\r\n */\r\nconst register = credentials => async dispatch => {\r\n  dispatch(registerRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/signup', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(registerError(error.message));\r\n  }\r\n};\r\n\r\n/*\r\n * POST @ /users/login\r\n * body:\r\n *    { email, password }\r\n *\r\n * После успешного логина добавляем токен в HTTP-заголовок\r\n */\r\nconst logIn = credentials => async dispatch => {\r\n  dispatch(loginRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(loginError(error.message));\r\n  }\r\n};\r\n\r\n/*\r\n * POST @ /users/logout\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. После успешного логаута, удаляем токен из HTTP-заголовка\r\n */\r\nconst logOut = () => async dispatch => {\r\n  dispatch(logoutRequest());\r\n\r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    dispatch(logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(logoutError(error.message));\r\n  }\r\n};\r\n\r\n/*\r\n * GET @ /users/current\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. Забираем токен из стейта через getState()\r\n * 2. Если токена нет, выходим не выполняя никаких операций\r\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\r\n */\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n    dispatch(getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\nexport { register, logOut, logIn, getCurrentUser };\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UserMenu_container__3LH6C\",\"avatar\":\"UserMenu_avatar__3Dj9-\",\"name\":\"UserMenu_name__31Xxz\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\n// const addNumber = createAction('number/addNumber', number => ({\r\n//   payload: { ...number, id: nanoid() },\r\n// }));\r\n\r\n// const deleteNumber = createAction('number/deleteNumber');\r\nconst filteredNumber = createAction('contacts/filteredNumber');\r\n\r\n//getAll\r\nconst fetchNumbersRequested = createAction('contacts/fetch-numbers-requested');\r\nconst fetchNumbersSuccess = createAction('contacts/fetch-numbers-success');\r\nconst fetchNumbersFailure = createAction('contacts/fetch-numbers-failure');\r\n\r\n//add\r\nconst addNumberRequested = createAction('contacts/add-number-requested');\r\nconst addNumberSuccess = createAction('contacts/add-number-success');\r\nconst addNumberFailure = createAction('contacts/add-number-failure');\r\n\r\n//remove\r\nconst removeNumberRequested = createAction('contacts/remove-number-requested');\r\nconst removeNumberSuccess = createAction('contacts/remove-number-success');\r\nconst removeNumberFailure = createAction('contacts/remove-number-failure');\r\n\r\nexport {\r\n  // addNumber,\r\n  // deleteNumber,\r\n  filteredNumber,\r\n  fetchNumbersRequested,\r\n  fetchNumbersSuccess,\r\n  fetchNumbersFailure,\r\n  addNumberRequested,\r\n  addNumberSuccess,\r\n  addNumberFailure,\r\n  removeNumberRequested,\r\n  removeNumberSuccess,\r\n  removeNumberFailure,\r\n};\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { getIsAuthenticated } from '../redux/auth';\r\nimport css from './Navigation.css/Navigation.module.css';\r\n\r\nconst Navigation = ({ isAuthenticated }) => (\r\n  <nav>\r\n    <NavLink to=\"/\" exact className={css.link} activeClassName={css.activeLink}>\r\n      Главная\r\n    </NavLink>\r\n\r\n    {isAuthenticated && (\r\n      <NavLink\r\n        to=\"/contacts\"\r\n        exact\r\n        className={css.link}\r\n        activeClassName={css.activeLink}\r\n      >\r\n        Контакты\r\n      </NavLink>\r\n    )}\r\n  </nav>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Navigation);\r\n","export default __webpack_public_path__ + \"static/media/default-avatar.5139163b.png\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getUsername } from '../../redux/auth';\r\nimport { logOut } from '../../redux/auth/auth-operations';\r\nimport defaultAvatar from './default-avatar.png';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport css from './UserMenu.module.css';\r\n\r\nconst UserMenu = ({ avatar, name, onLogout }) => (\r\n  <div className={css.container}>\r\n    <img src={avatar} alt=\"\" width=\"32\" className={css.avatar} />\r\n    <span className={css.name}>Добро пожаловать, {name}</span>\r\n    <Button type=\"button\" onClick={onLogout}>\r\n      Logout\r\n    </Button>\r\n  </div>\r\n);\r\nconst mapStateToProps = state => ({\r\n  name: getUsername(state),\r\n  avatar: defaultAvatar,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogout: logOut,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport css from './Navigation.css/Navigation.module.css';\r\n\r\nconst AuthNav = () => (\r\n  <div>\r\n    <NavLink\r\n      to=\"/register\"\r\n      exact\r\n      className={css.link}\r\n      activeClassName={css.activeLink}\r\n    >\r\n      Регистрация\r\n    </NavLink>\r\n    <NavLink\r\n      to=\"/login\"\r\n      exact\r\n      className={css.link}\r\n      activeClassName={css.activeLink}\r\n    >\r\n      Логин\r\n    </NavLink>\r\n  </div>\r\n);\r\n\r\nexport default AuthNav;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Navigation from './Navigation';\r\nimport UserMenu from './UserMenu';\r\nimport AuthNav from './AuthNav';\r\nimport { getIsAuthenticated } from '../redux/auth';\r\nimport css from './Navigation.css/Navigation.module.css';\r\n\r\nconst AppBar = ({ isAuthenticated }) => (\r\n  <header className={css.header}>\r\n    <Navigation />\r\n    {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n  </header>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(AppBar);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { getIsAuthenticated } from '../redux/auth';\r\n\r\n/**\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на /login\r\n */\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { getIsAuthenticated } from '../redux/auth';\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import React, { Component, Suspense, lazy } from 'react';\r\nimport { Switch } from 'react-router-dom';\r\nimport AppBar from './components/AppBar';\r\nimport PrivateRoute from './components/PrivateRoute';\r\nimport PublicRoute from './components/PublicRoute';\r\nimport { getCurrentUser } from './redux/auth';\r\nimport { connect } from 'react-redux';\r\n\r\nconst HomeView = lazy(() => import('./views/HomeView'));\r\nconst RegisterView = lazy(() => import('./views/RegisterView'));\r\nconst LoginView = lazy(() => import('./views/LoginView'));\r\nconst ContactsView = lazy(() => import('./views/ContactsView'));\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onGetCurretnUser();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <AppBar />\r\n\r\n        <Suspense fallback={<p>Загружаем...</p>}>\r\n          <Switch>\r\n            <PublicRoute exact path=\"/\" component={HomeView} />\r\n            <PublicRoute\r\n              path=\"/register\"\r\n              restricted\r\n              redirectTo=\"/\"\r\n              component={RegisterView}\r\n            />\r\n            <PublicRoute\r\n              path=\"/login\"\r\n              restricted\r\n              redirectTo=\"/\"\r\n              component={LoginView}\r\n            />\r\n            <PrivateRoute\r\n              path=\"/\"\r\n              redirectTo=\"/login\"\r\n              component={ContactsView}\r\n            />\r\n          </Switch>\r\n        </Suspense>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onGetCurretnUser: getCurrentUser,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  filteredNumber,\r\n  fetchNumbersRequested,\r\n  fetchNumbersSuccess,\r\n  fetchNumbersFailure,\r\n  addNumberRequested,\r\n  addNumberSuccess,\r\n  addNumberFailure,\r\n  removeNumberRequested,\r\n  removeNumberSuccess,\r\n  removeNumberFailure,\r\n} from './contactsAction';\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchNumbersRequested]: () => true,\r\n  [fetchNumbersSuccess]: () => false,\r\n  [fetchNumbersFailure]: () => false,\r\n  [addNumberRequested]: () => true,\r\n  [addNumberSuccess]: () => false,\r\n  [addNumberFailure]: () => false,\r\n  [removeNumberRequested]: () => true,\r\n  [removeNumberSuccess]: () => false,\r\n  [removeNumberFailure]: () => false,\r\n});\r\n\r\nconst numberReducer = createReducer(\r\n  [],\r\n\r\n  {\r\n    [fetchNumbersSuccess]: (_, { payload }) => payload,\r\n\r\n    [addNumberSuccess]: (state, { payload }) => [...state, payload],\r\n    [removeNumberSuccess]: (state, { payload }) => {\r\n      const index = state.findIndex(({ id }) => id === payload);\r\n\r\n      return [...state.slice(0, index), ...state.slice(index + 1)];\r\n    },\r\n  },\r\n);\r\n\r\nconst handleError = (_, { payload }) => payload.response.data;\r\nconst clearError = () => null;\r\n\r\nconst error = createReducer(null, {\r\n  [fetchNumbersRequested]: clearError,\r\n  [fetchNumbersFailure]: handleError,\r\n  [addNumberRequested]: clearError,\r\n  [addNumberFailure]: handleError,\r\n  [removeNumberRequested]: clearError,\r\n  [removeNumberFailure]: handleError,\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [filteredNumber]: (_, action) => action.payload,\r\n});\r\n\r\nconst contactsReducersr = combineReducers({\r\n  loading,\r\n  contactList: numberReducer,\r\n  error,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default contactsReducersr;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducers from './contacts/contactsReducers';\r\nimport { authReducer } from './auth';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  // logger,\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    contacts: contactsReducers,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport App from './App';\r\nimport { store, persistor } from './redux/store';\r\n\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}